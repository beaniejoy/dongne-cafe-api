enum Stage {
    ALL, DB_VALIDATE, TEST, BUILD, RUN_APP;
    Stage() {}
}

def executeConditionAllOr(stage) {
    return params.PIPELINE_STAGE_TARGET == Stage.ALL.name() || params.PIPELINE_STAGE_TARGET == stage.name()
}

pipeline {
    agent any

    // Disallow concurrent executions of the Pipeline.
    options { disableConcurrentBuilds() }

    parameters {
        // Choice of pipeline target stages
        choice(
                name: 'PIPELINE_STAGE_TARGET',
                choices: ["${Stage.ALL}", "${Stage.DB_VALIDATE}", "${Stage.TEST}", "${Stage.BUILD}", "${Stage.RUN_APP}"],
                description: 'set target pipeline stages'
        )
    }

    stages {
        stage('Init') {
            steps {
                script {
                    sh 'whoami'
                    sh 'printenv'

                    PROJECT_PROFILE = 'prod'
                    MODULE_NAME = 'dongne-service-api'

                    // DB Connection Credential
                    DB_CONNECTION_CREDENTIAL = 'b873f9bf-03cc-4daf-be4f-7e00194aa2a0'
                    withCredentials([
                            usernamePassword(
                                    credentialsId: "${DB_CONNECTION_CREDENTIAL}",
                                    usernameVariable: 'username',
                                    passwordVariable: 'password'
                            )
                    ]) {
                        DATABASE_USERNAME = "${username}"
                        DATABASE_PASSWORD = "${password}"
                    }

                    // flyway migration
                    MIGRATION_WORKSPACE = "${WORKSPACE}/db"

                    // ansible playbook
                    ANSIBLE_INVENTORY = "${HOME}/ansible/inventory"
                    ANSIBLE_PLAYBOOK = "${WORKSPACE}/scripts/deploy/playbook/run-app.yml"
                }
            }
        }

        stage('DB Validate') {
            when {
                expression { executeConditionAllOr(Stage.DB_VALIDATE) }
            }
            steps {
                flywayrunner installationName: 'flywaytool-jenkins',
                        flywayCommand: 'info validate',
                        commandLineArgs: "-configFiles=${MIGRATION_WORKSPACE}/flyway-${PROJECT_PROFILE}.conf",
                        credentialsId: "${DB_CONNECTION_CREDENTIAL}",
                        url: "jdbc:mysql://${DATABASE_HOST}:3306/dongne",
                        locations: "filesystem:${MIGRATION_WORKSPACE}/migration"
            }
        }

        stage('Test') {
            when {
                expression { executeConditionAllOr(Stage.TEST) }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:test"
            }
        }

        stage('Build') {
            when {
                expression { executeConditionAllOr(Stage.BUILD) }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:build -x test"
            }
        }

        stage('Deploy') {
            when {
                expression { executeConditionAllOr(Stage.ALL) }
            }
            steps {
                echo 'Deploy JAR file'
                sshPublisher(publishers: [
                        sshPublisherDesc(
                                configName: 'app-server',
                                transfers: [
                                        sshTransfer(
                                                cleanRemote: false,
                                                excludes: '',
                                                execCommand: '',
                                                execTimeout: 120000,
                                                flatten: false,
                                                makeEmptyDirs: false,
                                                noDefaultExcludes: false,
                                                patternSeparator: '[, ]+',
                                                remoteDirectory: 'deploy',
                                                remoteDirectorySDF: false,
                                                removePrefix: "${MODULE_NAME}/build/libs",
                                                sourceFiles: "${MODULE_NAME}/build/libs/${MODULE_NAME}.jar"
                                        )
                                ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false
                        )
                ])
            }
        }

        stage('Run Application with Ansible') {
            when {
                expression { executeConditionAllOr(Stage.RUN_APP) }
            }
            steps {
                ansiblePlaybook inventory: "${ANSIBLE_INVENTORY}",
                        playbook: "${ANSIBLE_PLAYBOOK}",
                        extraVars: [
                                module_name: "${MODULE_NAME}",
                                jenkins_user_home: "${HOME}",
                                spring_profile: "${PROJECT_PROFILE}",
                                database_host: "${DATABASE_HOST}",
                                database_username: "${DATABASE_USERNAME}",
                                database_password: "${DATABASE_PASSWORD}"
                        ]
            }
        }
    }
}