pipeline {
    agent any

    // Disallow concurrent executions of the Pipeline.
    options { disableConcurrentBuilds() }

    parameters {
        // Choice of pipeline target stages
        choice(
                name: 'PIPELINE_TARGET',
                choices: ['ALL', 'RUN'],
                description: 'set target pipeline stages'
        )
    }

    stages {
        stage('Init') {
            steps {
                script {
                    sh 'whoami'
                    sh 'printenv'

                    MODULE_NAME = 'dongne-service-api'
                    FLYWAY_CONFIG = '/home/admin/flyway/flyway.conf'
                }
            }
        }

        stage('DB Migrate') {
            when {
                expression { params.PIPELINE_TARGET == 'ALL' }
            }
            steps {
                flywayrunner installationName: 'flywaytool-jenkins',
                        flywayCommand: 'info migrate validate',
                        commandLineArgs: "-configFiles=${FLYWAY_CONFIG}",
                        credentialsId: 'b873f9bf-03cc-4daf-be4f-7e00194aa2a0',
                        url: '',
                        locations: "filesystem:${WORKSPACE}/db/migration"
            }
        }

        stage('Test') {
            when {
                expression { params.PIPELINE_TARGET == 'ALL' }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:test"
            }
        }

        stage('Build') {
            when {
                expression { params.PIPELINE_TARGET == 'ALL' }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:build -x test"
            }
        }

        stage('Deploy') {
            when {
                expression { params.PIPELINE_TARGET == 'ALL' }
            }
            steps {
                echo 'Deploy JAR file'
                sshPublisher(publishers: [
                        sshPublisherDesc(
                                configName: 'app-server',
                                transfers: [
                                        sshTransfer(
                                                cleanRemote: false,
                                                excludes: '',
                                                execCommand: '',
                                                execTimeout: 120000,
                                                flatten: false,
                                                makeEmptyDirs: false,
                                                noDefaultExcludes: false,
                                                patternSeparator: '[, ]+',
                                                remoteDirectory: 'deploy',
                                                remoteDirectorySDF: false,
                                                removePrefix: "${MODULE_NAME}/build/libs",
                                                sourceFiles: "${MODULE_NAME}/build/libs/${MODULE_NAME}.jar"
                                        )
                                ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false
                        )
                ])
            }
        }

        stage('Run Application with Ansible') {
            when {
                anyOf {
                    expression { params.PIPELINE_TARGET == 'ALL' }
                    expression { params.PIPELINE_TARGET == 'RUN' }
                }
            }
            steps {
                echo 'Run Application with Ansible'
            }
        }
    }
}