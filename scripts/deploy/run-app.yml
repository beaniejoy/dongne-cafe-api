---
- name: Run java application
  hosts: ec2
  become: true

  vars_files:
    - vars/all.yml

  tasks:
    - name: Register JAR file
      ansible.builtin.stat:
        path: "{{ remote_deploy_path }}/{{ module_name }}.jar"
      register: jar_file

    - name: Check JAR file exists
      block:
        - name: Fail and print message
          ansible.builtin.fail:
            msg: "{{ module_name }}.jar does not exist"
          when: not jar_file.stat.exists

        - name: Print success message
          ansible.builtin.debug:
            msg: "{{ module_name }}.jar exists!!"

    - name: "Register directory({{ remote_app_path }})"
      ansible.builtin.stat:
        path: "{{ remote_app_path }}"
      register: app_dir

    - name: "Check directory({{ remote_app_path }}) exists"
      block:
        - name: "Make directory({{ remote_app_path }})"
          ansible.builtin.file:
            path: "{{ remote_app_path }}"
            state: directory
            mode: 0755
            owner: "{{ remote_server_user }}"
            group: "{{ remote_server_group }}"
          when: not app_dir.stat.exists

        - name: Print success message
          ansible.builtin.debug:
            msg: "{{ remote_app_path }} exists!!"

    - name: "Register directory({{ remote_app_log_path }})"
      ansible.builtin.stat:
        path: "{{ remote_app_log_path }}"
      register: app_log_dir

    - name: "Check directory({{ remote_app_log_path }}) exists"
      block:
        - name: "Make directory({{ remote_app_log_path }})"
          ansible.builtin.file:
            path: "{{ remote_app_log_path }}"
            state: directory
            mode: 0755
            owner: "{{ remote_server_user }}"
            group: "{{ remote_server_group }}"
          when: not app_log_dir.stat.exists

        - name: Print success message
          ansible.builtin.debug:
            msg: "{{ remote_app_log_path }} exists!!"

    - name: "Register directory({{ remote_app_env_path }})"
      ansible.builtin.stat:
        path: "{{ remote_app_env_path }}"
      register: app_env_dir

    - name: "Check directory({{ remote_app_env_path }}) exists"
      block:
        - name: "Make directory({{ remote_app_env_path }})"
          ansible.builtin.file:
            path: "{{ remote_app_env_path }}"
            state: directory
            mode: 0755
            owner: "{{ remote_server_user }}"
            group: "{{ remote_server_group }}"
          when: not app_env_dir.stat.exists

        - name: Print success message
          ansible.builtin.debug:
            msg: "{{ remote_app_env_path }} exists!!"

    - name: Copy JAR file for running application
      ansible.builtin.copy:
        src: "{{ remote_deploy_path }}/{{ module_name }}.jar"
        remote_src: yes
        dest: "{{ remote_app_path }}/{{ module_name }}.jar"
        owner: "{{ remote_server_user }}"
        group: "{{ remote_server_group }}"
        mode: 0644

    - name: Remove deployed JAR file
      ansible.builtin.file:
        state: absent
        path: "{{ remote_deploy_path }}/{{ module_name }}.jar"

    - name: Install java package
      ansible.builtin.dnf:
        name: "{{ java_package }}"
        state: present

    - name: Copy service script file to remote server
      ansible.builtin.template:
        src: service.sh.j2
        dest: "{{ remote_app_env_path }}/service.sh"
        owner: "{{ remote_server_user }}"
        group: "{{ remote_server_group }}"
        mode: 0755

    - name: Copy service script file to remote server
      ansible.builtin.template:
        src: service.sh.j2
        dest: "{{ remote_app_path }}/service.sh"
        owner: "{{ remote_server_user }}"
        group: "{{ remote_server_group }}"
        mode: 0755

    - name: Run Application
      ansible.builtin.command: "{{ remote_app_path }}/service.sh"
      register: result

    - name: Show all prints while running service script
      ansible.builtin.debug:
        msg: "{{ result.stdout_lines }}"

    - name: Finish
      ansible.builtin.debug:
        msg: "All tasks completed!!"
