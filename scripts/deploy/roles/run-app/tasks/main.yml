---
- name: Register JAR file
  ansible.builtin.stat:
    path: "{{ remote_deploy_path }}/{{ module_name }}.jar"
  register: jar_file
  tags:
    - init
    - app

- name: Check JAR file exists
  block:
    - name: Fail and print message
      ansible.builtin.fail:
        msg: "{{ module_name }}.jar does not exist"
      when: not jar_file.stat.exists

    - name: Print success message
      ansible.builtin.debug:
        msg: "{{ module_name }}.jar exists!!"
  tags:
    - init
    - app

- name: Copy JAR file for running application
  ansible.builtin.copy:
    src: "{{ remote_deploy_path }}/{{ module_name }}.jar"
    remote_src: yes
    dest: "{{ remote_app_path }}/{{ module_name }}.jar"
    owner: "{{ remote_server_user }}"
    group: "{{ remote_server_group }}"
    mode: 0644
  tags:
    - init
    - app

- name: Remove deployed JAR file
  ansible.builtin.file:
    state: absent
    path: "{{ remote_deploy_path }}/{{ module_name }}.jar"
  tags:
    - init
    - app

#### run application
- name: Copy service script file to remote server
  ansible.builtin.template:
    src: service.sh.j2
    dest: "{{ remote_app_path }}/service.sh"
    owner: "{{ remote_server_user }}"
    group: "{{ remote_server_group }}"
    mode: 0755
  tags:
    - init
    - app

- name: Run Application
  ansible.builtin.command: "{{ remote_app_path }}/service.sh"
  register: result
  environment:
    VAULT_DOMAIN_ADDR: "{{ vault_address }}"
    VAULT_AUTH_TOKEN: "{{ vault_token }}"

- name: Show all prints while running service script
  ansible.builtin.debug:
    msg: "{{ result.stdout_lines }}"
  tags:
    - init
    - app

- name: Finish
  ansible.builtin.debug:
    msg: "All tasks completed!!"
  tags:
    - init
    - app

# 1. readlink current deploy stamp
# 2. current link -> previous link
# 3. 현재 배포된 jar 파일 -> current link

# rolling deploy
# 1. nginx 8080 port 연결 끊기
# 2. 8080 app graceful shutdown
# 3. run current link jar
# 4. after completion, nginx 8080 port connect again (reload)

# 5. 8081 port도 위와 같이 진행
