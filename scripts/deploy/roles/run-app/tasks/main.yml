---
- name: Register JAR file
  ansible.builtin.stat:
    path: "{{ remote_deploy_path }}/{{ module_name }}.jar"
  register: jar_file
  tags:
    - init
    - deploy

- name: Check JAR file exists
  block:
    - name: Fail and print message
      ansible.builtin.fail:
        msg: "{{ module_name }}.jar does not exist"
      when: not jar_file.stat.exists

    - name: Print success message
      ansible.builtin.debug:
        msg: "{{ module_name }}.jar exists!!"
  tags:
    - init
    - deploy

- name: Copy JAR file for running application
  ansible.builtin.copy:
    src: "{{ remote_deploy_path }}/{{ module_name }}.jar"
    remote_src: yes
    dest: "{{ remote_app_path }}/{{ module_name }}.jar"
    owner: "{{ remote_server_user }}"
    group: "{{ remote_server_group }}"
    mode: 0644
  tags:
    - init
    - deploy

- name: Remove deployed JAR file
  ansible.builtin.file:
    state: absent
    path: "{{ remote_deploy_path }}/{{ module_name }}.jar"
  tags:
    - init
    - deploy

- name: Copy service script file to remote server
  ansible.builtin.template:
    src: service.sh.j2
    dest: "{{ remote_app_path }}/service.sh"
    owner: "{{ remote_server_user }}"
    group: "{{ remote_server_group }}"
    mode: 0755
  tags:
    - init
    - deploy

- name: Run service script with ports
  ansible.builtin.include_tasks:
    file: run_script.yml
    apply:
      tags:
        - init
        - deploy
  loop:
    - 8080
    - 8081
  tags:
    - init
    - deploy

- name: Finish
  ansible.builtin.debug:
    msg: "All tasks completed!!"
  tags:
    - init
    - deploy
