#!/bin/bash

# prevent from multiple running
SHELL_SCRIPT=$(basename "$0")
PROCESS_SHELL_COUNT=$(pgrep -c "${SHELL_SCRIPT}")
if [ "$PROCESS_SHELL_COUNT" -gt 1 ]; then
    echo -e "not allowed to run multiple..."
    exit 10
fi

COMMAND=$1

APP_WORKSPACE="{{ remote_app_path }}"
MODULE_NAME="{{ module_name }}"

# nginx proxy
PROXY_CONF_FILE=/etc/nginx/conf.d/${MODULE_NAME}.conf
PROXY_TARGET_UPSTREAM="server 127.0.0.1"

# app
SPRING_PROFILE="{{ spring_profile }}"
STD_OUT=${APP_WORKSPACE}/logs/stdout
STD_ERR=${APP_WORKSPACE}/logs/stderr

# blue-green
PORT_GROUP=$2
PORT_GROUP_FILE=${APP_WORKSPACE}/${PORT_GROUP}
readarray -t TARGET_GROUP_PORTS < "${PORT_GROUP_FILE}"  # target ports
printf -v JOINED_GROUP_PORTS "%s," "${TARGET_GROUP_PORTS[@]}"
JOINED_GROUP_PORTS="${JOINED_GROUP_PORTS%,}"

# check group app runnable before deploy (param: group_name)
check_group_runnable() {
  echo "-----------------------------------------"
  printf "[CHECK ${PORT_GROUP} RUNNABLE] ports: (%s)\n" "${JOINED_GROUP_PORTS}"
  echo "-----------------------------------------"

  for port in "${TARGET_GROUP_PORTS[@]}";
  do
    current_pid=$(pgrep -f "java.*${port}")
    if [ -n "${current_pid}" ];
    then
      echo "${PORT_GROUP}(${port}) already running"
      exit 50
    fi
  done

  echo "${PORT_GROUP} runnable!!"
}

# health check application (param: port)
CHECK_MAX_COUNT=20
CHECK_COUNT=0
app_health_check() {
  local target_port=$1

  if [ ${CHECK_COUNT} -gt ${CHECK_MAX_COUNT} ];
  then
    echo "Failure of running java application(${target_port})"
    exit 50
  fi

  status_code=$(curl --connect-timeout 5 --max-time 10 -i -X GET http://localhost:"${target_port}"/monitoring/health | awk '/HTTP\/1/{print $2}')
  if [[ ${status_code} =~ ^2[0-9]{2}$ ]];
  then
    echo "application(${target_port}) health check > UP"
  else
    echo "application(${target_port}) health check > DOWN"
    sleep 5s
    CHECK_COUNT=$((CHECK_COUNT + 1))
    app_health_check "${target_port}"
  fi
}

# run app (param: port)
run_app() {
  local target_port=$1

  nohup java -jar \
    -Dspring.profiles.active="${SPRING_PROFILE}" \
    -Dserver.port="${target_port}" \
    "${APP_WORKSPACE}"/"${MODULE_NAME}".jar 1>"${STD_OUT}_${target_port}" 2>"${STD_ERR}_${target_port}" &

  echo ">> application(${target_port}) health check"
  CHECK_COUNT=0
  app_health_check "${target_port}"
}

# run group application
run_group_app() {
  echo "-----------------------------------------"
  printf "[RUN APP] ${PORT_GROUP} (%s)\n" "${JOINED_GROUP_PORTS}"
  echo "-----------------------------------------"

  cd "${APP_WORKSPACE}" || exit 40

  echo ">> run java application"
  if ! java --version;
  then
    echo "no JRE setup > JRE is required!!"
    exit 50
  fi

  for port in "${TARGET_GROUP_PORTS[@]}";
  do
    run_app "${port}"
  done
}

# toggle proxy upstream status (param: port, toggle_status(up/down))
toggle_proxy_upstream() {
  local target_port=$1
  local toggle_status=$2

  local target_proxy_upstream
  target_proxy_upstream="${PROXY_TARGET_UPSTREAM}:${target_port}"
  local from_upstream_status  # regex
  local to_upstream_status

  case ${toggle_status} in
    up)
      from_upstream_status="${target_proxy_upstream}\sdown;"
      to_upstream_status="${target_proxy_upstream};"
      ;;
    down)
      from_upstream_status="${target_proxy_upstream};"
      to_upstream_status="${target_proxy_upstream} down;"
      ;;
    *)
      echo "[func_toggle_proxy_upstream] Invalid command - ${target_port}(${toggle_status})"
      exit 40;
      ;;
  esac

  echo ">> proxy upstream ${target_port} ${toggle_status}"
  target_upstream_status=$(grep "${to_upstream_status}" "${PROXY_CONF_FILE}")
  if [ -n "${target_upstream_status}" ]
  then
    echo "proxy upstream ${target_port} status - already ${toggle_status}"
  else
    echo "proxy upstream ${target_port} setting ${toggle_status}"
    sudo sed -i "s/\(${from_upstream_status}\)/${to_upstream_status}/g" "${PROXY_CONF_FILE}"
  fi
}

# toggle proxy upstream group status (param: group_file, toggle_status(up/down))
toggle_proxy_upstream_group() {
  local target_group_name=$1
  local toggle_status=$2

  echo ">> proxy upstream group(${target_group_name}) ${toggle_status}"
  readarray -t target_ports < "${APP_WORKSPACE}/${target_group_name}"
  for port in "${target_ports[@]}";
  do
    toggle_proxy_upstream "${port}" "${toggle_status}"
  done
}

# switch BLUE, GREEN group file
switch_group_file() {
  local blue_file
  blue_file="${APP_WORKSPACE}/BLUE"
  local green_file
  green_file="${APP_WORKSPACE}/GREEN"

  readarray -t blue_ports < "${blue_file}"
  readarray -t green_ports < "${green_file}"

  printf "%s\n" "${blue_ports[@]}" > "${green_file}"
  printf "%s\n" "${green_ports[@]}" > "${blue_file}"

  echo ">> switching group file completed!!"
}

switch_proxy_upstream_group() {
  echo "-----------------------------------------"
  echo "[SWITCH UPSTREAM GROUP] Blue - Green"
  echo "-----------------------------------------"

  toggle_proxy_upstream_group "GREEN" up
  toggle_proxy_upstream_group "BLUE" down

  if ! sudo nginx -t;
  then
    printf "Invalid nginx conf > switching proxy upstream group"
    exit 40
  fi

  sudo systemctl reload nginx

  switch_group_file
}

# shutdown application (param: port)
shutdown() {
  local target_port=$1

  echo ">> kill current running application(${target_port})"

  current_pid=$(pgrep -f "java.*${target_port}")
  if [ -z "${current_pid}" ];
  then
    echo "no current running application >> pass killing process"
  else
    echo "stop java application(${target_port}) - ${current_pid}"
    sudo kill -TERM "${current_pid}"
    sleep 5
  fi
}

# shutdown group application (param: group_file)
shutdown_group_app() {
  echo "-----------------------------------------"
  printf "[SHUTDOWN APP] ${PORT_GROUP} (%s)\n" "${JOINED_GROUP_PORTS}"
  echo "-----------------------------------------"

  for port in "${TARGET_GROUP_PORTS[@]}";
  do
    shutdown "${port}"
  done
}

case "${COMMAND}" in
  check)
    check_group_runnable
    ;;
  run)
    run_group_app
    ;;
  switch_proxy)
    switch_proxy_upstream_group
    ;;
  shutdown)
    shutdown_group_app
    ;;
  *)
    echo "${COMMAND} > Not supported command"
    exit 40;
esac
