#!/bin/bash

# prevent from multiple running
SHELL_SCRIPT=$(basename "$0")
PROCESS_SHELL_COUNT=$(pgrep -c "${SHELL_SCRIPT}")
if [ "$PROCESS_SHELL_COUNT" -gt 1 ]; then
    echo -e "not allowed to run multiple..."
    exit 10
fi

COMMAND=$1
PORT=$2

APP_WORKSPACE="{{ remote_app_path }}"
MODULE_NAME="{{ module_name }}"

# nginx proxy
PROXY_CONF_FILE=/etc/nginx/conf.d/${MODULE_NAME}.conf
PROXY_TARGET_UPSTREAM="server 127.0.0.1:${PORT}"

# app
SPRING_PROFILE="{{ spring_profile }}"
STD_OUT=${APP_WORKSPACE}/logs/stdout_${PORT}.log
STD_ERR=${APP_WORKSPACE}/logs/stderr_${PORT}.log

# toggle proxy upstream status (up, down)
private_toggle_proxy_upstream() {
  local toggle_status
  toggle_status=$1

  local from_upstream_status  # regex
  local to_upstream_status
  case ${toggle_status} in
    up)
      from_upstream_status="${PROXY_TARGET_UPSTREAM}\sdown;"
      to_upstream_status="${PROXY_TARGET_UPSTREAM};"
      ;;
    down)
      from_upstream_status="${PROXY_TARGET_UPSTREAM};"
      to_upstream_status="${PROXY_TARGET_UPSTREAM} down;"
      ;;
    *)
      # TODO 취약점
      # 만약 중간에 exit 되고 이미 적용된 upstream이 있는 경우 upstream간에 버전 불일치 발생 가능
      echo "(private_toggle_proxy_upstream) Invalid command - ${toggle_status}"
      exit 40;
      ;;
  esac

  echo ">> proxy upstream ${PORT} ${toggle_status}"
  target_upstream_status=$(grep "${to_upstream_status}" "${PROXY_CONF_FILE}")
  if [ -n "${target_upstream_status}" ]
  then
    echo "proxy upstream ${PORT} status - already ${toggle_status}"
  else
    echo "proxy upstream ${PORT} setting ${toggle_status}"
    sudo sed -i "s/\(${from_upstream_status}\)/${to_upstream_status}/g" "${PROXY_CONF_FILE}"
  fi

  if ! sudo nginx -t;
  then
    echo "Invalid nginx conf > upstream(${PORT}}) ${toggle_status}"
    exit 40
  fi

  sudo systemctl reload nginx
}

# health check application
CHECK_MAX_COUNT=10
CHECK_COUNT=0
private_app_health_check() {
  if [ $CHECK_COUNT -gt $CHECK_MAX_COUNT ];
  then
    echo "Failure of running java application(${PORT})"
    exit 50
  fi

  status_code=$(curl --connect-timeout 1 --max-time 3 -i -X GET http://localhost:"${PORT}"/monitoring/health | awk '/HTTP\/1/{print $2}')
  if [[ $status_code =~ ^2[0-9]{2}$ ]];
  then
    echo "application(${PORT}) health check > UP"
  else
    echo "application(${PORT}) health check > DOWN"
    sleep 3
    CHECK_COUNT=$(expr ${CHECK_COUNT} + 1)
    private_app_health_check
  fi
}

# shutdown application
shutdown() {
  echo "-----------------------------------------"
  echo "[SHUTDOWN] ${MODULE_NAME}:${PORT}"
  echo "-----------------------------------------"

  private_toggle_proxy_upstream down

  echo ">> kill current running application(${PORT})"
  current_pid=$(pgrep -f "java.*${PORT}")
  if [ -z "${current_pid}" ];
  then
    echo "no current running application >> pass killing process"
  else
    echo "stop java application(${PORT}) - ${current_pid}"
    sudo kill -TERM "${current_pid}"
    sleep 2
  fi
}

# run application
run_app() {
  echo "-----------------------------------------"
  echo "[RUN APP] ${MODULE_NAME}:${PORT}"
  echo "-----------------------------------------"

  cd "${APP_WORKSPACE}" || exit 40

  echo ">> run java application"
  if ! java --version;
  then
    echo "no JRE setup > JRE is required!!"
    exit 50
  fi

  nohup java -jar \
    -Dspring.profiles.active="${SPRING_PROFILE}" \
    -Dserver.port="${PORT}" \
    "${APP_WORKSPACE}"/"${MODULE_NAME}".jar 1>"${STD_OUT}" 2>"${STD_ERR}" &

  echo ">> application(${PORT}) health check"
  private_app_health_check

  private_toggle_proxy_upstream up
}

case "${COMMAND}" in
  shutdown)
    shutdown
    ;;
  run)
    run_app
    ;;
  *)
    echo "${COMMAND} > Not supported command"
    exit 40;
esac
