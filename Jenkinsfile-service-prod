enum Stage {
    ALL, DB_VALIDATE, TEST, BUILD, DEPLOY, RUN_APP;
    Stage() {}
}

def executeConditionAllOr(stage) {
    return params.PIPELINE_STAGE_TARGET == Stage.ALL.name() || params.PIPELINE_STAGE_TARGET == stage.name()
}

pipeline {
    agent any

    // Disallow concurrent executions of the Pipeline.
    options { disableConcurrentBuilds() }

    parameters {
        // Choice of pipeline target stages
        choice(
                name: 'PIPELINE_STAGE_TARGET',
                choices: ["${Stage.ALL}", "${Stage.DB_VALIDATE}", "${Stage.TEST}", "${Stage.BUILD}", "${Stage.DEPLOY}", "${Stage.RUN_APP}"],
                description: 'set target pipeline stages'
        )
    }

    stages {
        stage('Init') {
            steps {
                script {
                    sh 'whoami'
                    sh 'printenv'

                    PROJECT_PROFILE = 'prod'
                    PROJECT_NAME = 'service-api'
                    PARENT_MODULE_NAME = 'app'
                    MODULE_NAME = "${PARENT_MODULE_NAME}:${PROJECT_NAME}"

                    // flyway migration
                    MIGRATION_WORKSPACE = "${WORKSPACE}/flyway"

                    // ansible playbook repo
                    SCRIPT_ANSIBLE_DEPLOY_REPO = "${JENKINS_HOME}/workspace/SCRIPT_ansible-deploy"

                    ANSIBLE_INVENTORY = "${HOME}/ansible/inventory"
                    ANSIBLE_PLAYBOOK = "${SCRIPT_ANSIBLE_DEPLOY_REPO}/${PROJECT_NAME}.yml"

                    // credentials info
                    def secrets = [
                        [
                            path: "secret/dongne/${PROJECT_PROFILE}",
                            engineVersion: 2,
                            secretValues: [
                                [envVar: 'jdbcUrl', vaultKey: 'spring.datasource.hikari.jdbc-url'],
                                [envVar: 'username', vaultKey: 'spring.datasource.hikari.username'],
                                [envVar: 'password', vaultKey: 'spring.datasource.hikari.password']
                            ]
                        ],
                        [
                            path: "vault/config",
                            engineVersion: 2,
                            secretValues: [
                                [envVar: 'vaultAddr', vaultKey: 'VAULT_ADDR'],
                                [envVar: 'vaultToken', vaultKey: 'VAULT_TOKEN']
                            ]
                        ],
                    ]

                    withVault([
                        vaultSecrets: secrets,
                        configuration: [
                            engineVersion: 2,
                            timeout: 10
                        ]
                    ]) {
                        DB_URL = "${jdbcUrl}"
                        DB_USERNAME = "${username}"
                        DB_PASSWORD = "${password}"
                        VAULT_ADDR = "${vaultAddr}"
                        VAULT_TOKEN = "${vaultToken}"
                    }
                }
            }
        }

        stage('DB Validate') {
            when {
                expression { executeConditionAllOr(Stage.DB_VALIDATE) }
            }
            steps {
                sh "./gradlew clean"
            }
        }

        stage('Test') {
            when {
                expression { executeConditionAllOr(Stage.TEST) }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:test"
            }
        }

        stage('Build') {
            when {
                expression { executeConditionAllOr(Stage.BUILD) }
            }
            steps {
                sh "./gradlew clean :${MODULE_NAME}:build -x test"
            }
        }

        stage('Deploy') {
            when {
                expression { executeConditionAllOr(Stage.DEPLOY) }
            }
            steps {
                echo 'Deploy JAR file'
                sshPublisher(publishers: [
                        sshPublisherDesc(
                                configName: 'app-server',
                                transfers: [
                                        sshTransfer(
                                                cleanRemote: false,
                                                excludes: '',
                                                execCommand: '',
                                                execTimeout: 120000,
                                                flatten: false,
                                                makeEmptyDirs: false,
                                                noDefaultExcludes: false,
                                                patternSeparator: '[, ]+',
                                                remoteDirectory: 'deploy',
                                                remoteDirectorySDF: false,
                                                removePrefix: "${PARENT_MODULE_NAME}/${PROJECT_NAME}/build/libs",
                                                sourceFiles: "${PARENT_MODULE_NAME}/${PROJECT_NAME}/build/libs/${PROJECT_NAME}.jar"
                                        )
                                ],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: true
                        )
                ])
            }
        }

        stage('Run Application with Ansible') {
            when {
                expression { executeConditionAllOr(Stage.RUN_APP) }
            }
            steps {
                ansiblePlaybook(
                        installation: 'ansible',
                        playbook: "${ANSIBLE_PLAYBOOK}",
                        inventory: "${ANSIBLE_INVENTORY}",
                        tags: 'deploy,blue_green',
                        extraVars: [
                            module_name: "${PROJECT_NAME}",
                            spring_profile: "${PROJECT_PROFILE}",
                            vault_address: "${VAULT_ADDR}",
                            vault_token: "${VAULT_TOKEN}"
                        ]
                )
            }
        }
    }
}
