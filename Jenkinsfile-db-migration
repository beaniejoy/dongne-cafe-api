enum FlywayCommand {
    ALL, INFO, MIGRATE, VALIDATE;
    FlywayCommand() {}
}

def executeConditionAllOr(choice) {
    return params.FLYWAY_COMMAND == FlywayCommand.ALL.name() || params.FLYWAY_COMMAND == choice.name()
}

// Run flyway runner Jenkins Plugin
def executeFlywayRunner(flywayCmd) {
    if (flywayCmd == FlywayCommand.ALL) {
        return
    }

    flywayrunner installationName: 'flywaytool-jenkins',
            flywayCommand: "$flywayCmd".toLowerCase(),
            commandLineArgs: "-configFiles=${MIGRATION_WORKSPACE}/flyway-${PROJECT_PROFILE}.conf",
            credentialsId: "${DB_CONNECTION_CREDENTIAL}",
            url: "jdbc:mysql://${DATABASE_HOST}:3306/dongne",
            locations: "filesystem:${MIGRATION_WORKSPACE}/migration"
}

pipeline {
    agent any

    // Disallow concurrent executions of the Pipeline.
    options { disableConcurrentBuilds() }

    parameters {
        // Choice of flyway target command
        choice(
                name: 'FLYWAY_COMMAND',
                choices: ["${FlywayCommand.ALL}", "${FlywayCommand.INFO}", "${FlywayCommand.VALIDATE}", "${FlywayCommand.MIGRATE}"],
                description: 'target flyway command'
        )
    }

    stages {
        stage('Init') {
            steps {
                script {
                    sh 'whoami'
                    sh 'printenv'

                    PROJECT_PROFILE = 'prod'

                    // DB Connection Credential
                    DB_CONNECTION_CREDENTIAL = 'b873f9bf-03cc-4daf-be4f-7e00194aa2a0'
                    withCredentials([
                            usernamePassword(
                                    credentialsId: "${DB_CONNECTION_CREDENTIAL}",
                                    usernameVariable: 'username',
                                    passwordVariable: 'password'
                            )
                    ]) {
                        DATABASE_USERNAME = "${username}"
                        DATABASE_PASSWORD = "${password}"
                    }

                    // flyway migration
                    MIGRATION_WORKSPACE = "${WORKSPACE}/db"
                }
            }
        }

        stage('DB Version Info') {
            when {
                expression { executeConditionAllOr(FlywayCommand.INFO) }
            }
            steps { executeFlywayRunner(FlywayCommand.INFO) }
        }

        stage('DB Migrate') {
            when {
                expression { executeConditionAllOr(FlywayCommand.MIGRATE) }
            }
            steps { executeFlywayRunner(FlywayCommand.MIGRATE) }
        }

        stage('DB Validate') {
            when {
                expression { executeConditionAllOr(FlywayCommand.VALIDATE) }
            }
            steps { executeFlywayRunner(FlywayCommand.VALIDATE) }
        }
    }
}