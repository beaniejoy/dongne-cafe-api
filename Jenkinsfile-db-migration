enum Stage {
    ALL, INFO, MIGRATE, VALIDATE, REPAIR;
    Stage() {}
}

def executeConditionAllOr(stage) {
    return params.FLYWAY_COMMAND == Stage.ALL.name() || params.FLYWAY_COMMAND == stage.name()
}

// Run flyway runner Jenkins Plugin
def executeFlywayRunner(stage) {
    if (stage == Stage.ALL) {
        return
    }

    flywayrunner installationName: 'flyway-jenkins',
            flywayCommand: "$stage".toLowerCase(),
            commandLineArgs: "-configFiles=${MIGRATION_WORKSPACE}/flyway-${PROJECT_PROFILE}.conf",
            credentialsId: "VAULT_DB_CONNECTION_${PROJECT_PROFILE.toString().toUpperCase()}",
            url: "${JDBC_URL}",
            locations: "filesystem:${MIGRATION_WORKSPACE}/migration"
}

pipeline {
    agent any

    // Disallow concurrent executions of the Pipeline.
    options { disableConcurrentBuilds() }

    parameters {
        // Choice of flyway target command
        choice(
                name: 'FLYWAY_COMMAND',
                choices: ["${Stage.ALL}", "${Stage.INFO}", "${Stage.MIGRATE}", "${Stage.VALIDATE}", "${Stage.REPAIR}"],
                description: 'target flyway command'
        )
    }

    stages {
        stage('Init') {
            steps {
                script {
                    sh 'whoami'
                    sh 'printenv'

                    PROJECT_PROFILE = 'prod'

                    // flyway migration directory
                    MIGRATION_WORKSPACE = "${WORKSPACE}/flyway"

                    // credentials info
                    def secrets = [
                        [
                            path: "secret/dongne/${PROJECT_PROFILE}",
                            engineVersion: 2,
                            secretValues: [
                                [envVar: 'jdbcUrl', vaultKey: 'spring.datasource.hikari.jdbc-url']
                            ]
                        ],
                    ]

                    withVault([vaultSecrets: secrets]) {
                        JDBC_URL = "${jdbcUrl}"
                    }
                }
            }
        }

        stage('DB Version Info') {
            when {
                expression { executeConditionAllOr(Stage.INFO) }
            }
            steps { executeFlywayRunner(Stage.INFO) }
        }

        stage('DB Migrate') {
            when {
                expression { executeConditionAllOr(Stage.MIGRATE) }
            }
            steps { executeFlywayRunner(Stage.MIGRATE) }
        }

        stage('DB Validate') {
            when {
                expression { executeConditionAllOr(Stage.VALIDATE) }
            }
            steps { executeFlywayRunner(Stage.VALIDATE) }
        }

        stage('DB Repair(Only)') {
            when {
                expression { params.FLYWAY_COMMAND == Stage.REPAIR.name() }
            }
            steps { executeFlywayRunner(Stage.REPAIR) }
        }
    }
}
